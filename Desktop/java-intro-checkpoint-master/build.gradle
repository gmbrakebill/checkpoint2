plugins {
    id 'java'
    id 'jacoco'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    assessment {
        java.srcDir 'assessment/java'
        resources.srcDir 'assessment/resources'
    }
}

// Ensure that any tests will use the new JUnit testing platform
tasks.withType(Test) { useJUnitPlatform() }

task assess(type: Test) {
    description = 'Run automated assessment.'
    group = 'verification'

    testClassesDirs = sourceSets.assessment.output.classesDirs
    classpath = sourceSets.assessment.runtimeClasspath

    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed"

        showExceptions true
        showCauses true
        exceptionFormat "full"
    }
}

jar {

    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'com.galvanize.SumOfPositivesCLI'
        )
    }
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit4 or JUnit Jupiter API for compilation.
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'

    // Use JUnit Jupiter Engine for testing both JUnit4 & JUnit5 tests.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

    // original dependencies
    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    assessmentImplementation 'cglib:cglib-nodep:2.2'
    assessmentImplementation sourceSets.main.output
    assessmentImplementation configurations.testImplementation

    assessmentRuntime configurations.testRuntime
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()

    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed"

        showExceptions true
        showCauses true
        exceptionFormat "full"
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.90
            }
        }
    }
}

assess.finalizedBy(test)
test.finalizedBy(jacocoTestReport)
jacocoTestReport.dependsOn(test)
jacocoTestReport.finalizedBy(jacocoTestCoverageVerification)

wrapper {
    gradleVersion = '6.5'
    distributionType = Wrapper.DistributionType.ALL
}
